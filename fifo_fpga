module fifo_fpga # (
  parameter int SLOTS = 32,
  parameter int WIDTH = 32
)(
  input                                       clk,
  input                                       arst,
  input                                       write_i,
  input                                       read_i,
  input         [WIDTH-1:0]                   data_i,
  output  logic [WIDTH-1:0]                   data_o,
  output  logic                               error_o,
  output  logic                               full_o,
  output  logic                               empty_o,
  output  logic [$clog2(SLOTS>1?SLOTS:2):0]   ocup_o
);
  //`define MSB_SLOT  addra

//  logic [SLOTS-1:0] [WIDTH-1:0]     fifo_ff;
`define MSB_SLOT $clog2(SLOTS>1?SLOTS:2)
  logic [`MSB_SLOT:0] write_ptr_ff;
  logic [`MSB_SLOT:0] read_ptr_ff;
  logic [`MSB_SLOT:0] next_write_ptr;
  logic [`MSB_SLOT:0] next_read_ptr;
  logic [`MSB_SLOT:0] fifo_ocup;
  logic ena;
  logic [`MSB_SLOT:0] addra;
  logic rsta;
  
xilinx_single_port_ram_write_first BRAM(
    .addra(addra),     // Address bus, width determined from RAM_DEPTH
    .dina(data_i),       // RAM input data, width determined from RAM_WIDTH
    .clka(clk),       // Clock
    .wea(write_i),         // Write enable
    .ena(ena),         // RAM Enable, for additional power savings, disable port when not in use
    .rsta(rsta),       // Output reset (does not affect memory contents)
    .regcea(1'b1),   // Output register enable
    .douta(data_o)  
);

always_comb begin
    next_read_ptr = read_ptr_ff;
    next_write_ptr = write_ptr_ff;
    if (SLOTS == 1) begin
      empty_o = (write_ptr_ff == read_ptr_ff);
      full_o  = (write_ptr_ff[0] != read_ptr_ff[0]);
      ena = empty_o ? 'b0 : 'b1;
      rsta = write_i? 'b1 :'b0;
      end
       else begin
      empty_o = (write_ptr_ff == read_ptr_ff);
      full_o  = (write_ptr_ff[`MSB_SLOT-1:0] == read_ptr_ff[`MSB_SLOT-1:0]) &&
                (write_ptr_ff[`MSB_SLOT] != read_ptr_ff[`MSB_SLOT]);
       ena = empty_o ? 'b0 : 'b1;
       rsta = write_i? 'b1 :'b0;
     end 
     
  if (write_i && ~full_o)begin 
      next_write_ptr = write_ptr_ff + 'd1;
      addra<=write_ptr_ff;
 end
    if (read_i && ~empty_o)begin 
      next_read_ptr = read_ptr_ff + 'd1;   
      addra<=read_ptr_ff;
end
   
    error_o = (write_i && full_o) || (read_i && empty_o);
    fifo_ocup = write_ptr_ff - read_ptr_ff;
    ocup_o = fifo_ocup;
    
    
  end  
  
  always_ff @ (posedge clk or posedge arst) begin
    if (arst) begin
      write_ptr_ff <= '0;
      read_ptr_ff <= '0;
      //addra<='0;
    //  fifo_ff <= '0;
    end
    else begin
      write_ptr_ff <= next_write_ptr;
      read_ptr_ff <= next_read_ptr;
      
      end
     end
     
     
     endmodule          
